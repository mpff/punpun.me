---

- hosts: all

  vars:
      host: "{{ inventory_hostname }}"
      repo_url: "git@github.com:mpff/punpun.me.git"
      site_dir: "/home/{{ ansible_user }}/sites/{{ host }}"
      local_dir: "{{ inventory_dir }}/.."

  tasks:

    - name: make sure required packages are installed
      apt:
          pkg=nginx,git,python3.6,python3.6-venv 
          state=present

    - name: create site directory if it doesn't exist
      file:
          path: "{{ site_dir }}"
          state: directory

    - name: get local checkout sh1
      local_action: command chdir={{ local_dir }} git log --pretty=format:"%H" -n 1
      register: local_commit

    - name: pull down source code
      git:
          name: "{{ repo_url }}"
          dest: "{{ site_dir }}"
          version: "{{ local_commit.stdout }}"
           

    - name: check if .git directory exists
      stat:
          path: "{{ site_dir }}/.git"
      register: gitpath

    - name: fetch git repository
      command: chdir={{ site_dir }} git fetch
      when: gitpath.stat.exists
    
    - name: clone git repository
      command: chdir={{ site_dir }} git clone {{ repo_url }} .
      when: not gitpath.stat.exists

    - name: git reset to local commit
      command: chdir={{ site_dir }} git reset --hard {{ local_commit.stdout }}

    - name: check if virtualenv exists
      stat:
          path: "{{ site_dir }}/virtualenv/bin/pip"
      register: pipath

    - name: start virtualenv
      command: chdir={{ site_dir }} python3.6 -m venv virtualenv
      when: pipath.stat.exists

    - name: update virtualenv 
      command: chdir={{ site_dir }} ./virtualenv/bin/pip install -r requirements.txt

    - name: check if dotenv exists
      stat:
          path: "{{ site_dir }}/.env"
      register: envpath


    - name: allow long hostnames in nginx
      lineinfile:
          dest=/etc/nginx/nginx.conf
          regexp='(\s+)#? ?server_names_hash_bucket_size'
          backrefs=yes
          line='\1server_names_hash_bucket_size 64;'

    - name: add nginx config to sites-available
      template: src=./nginx.conf.j2 dest=/etc/nginx/sites-available/{{ host }}
      notify:
          - restart nginx

    - name: add symlink in nginx sites-enabled
      file:
          src=/etc/nginx/sites-available/{{ host }}
          dest=/etc/nginx/sites-enabled/{{ host }}
          state=link
      notify:
          -restart nginx

    - name: write gunicorn service script
      template:
          src=./gunicorn.service.j2
          dest=/etc/systemd/system/gunicorn-{{ host }}.service
      notify:
          - restart gunicorn

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart gunicorn
      systemd:
          name=gunicorn-{{ host }}
          daemon_reload=yes
          enabled=yes
          state=restarted

